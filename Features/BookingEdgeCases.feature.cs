// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace RestfulBookerTests.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Booking Management - Edge Cases")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class BookingManagement_EdgeCasesFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "Booking Management - Edge Cases", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "BookingEdgeCases.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create booking with multiple valid payloads")]
        [NUnit.Framework.TestCaseAttribute("Alice", "Green", "100", "true", "2025-08-10", "2025-08-15", "Breakfast", null)]
        [NUnit.Framework.TestCaseAttribute("Bob", "White", "300", "false", "2025-09-01", "2025-09-05", "Dinner", null)]
        [NUnit.Framework.TestCaseAttribute("Carol", "Black", "0", "true", "2025-10-01", "2025-10-03", "None", null)]
        public async global::System.Threading.Tasks.Task CreateBookingWithMultipleValidPayloads(string firstname, string lastname, string totalprice, string depositpaid, string checkin, string checkout, string additionalneeds, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("firstname", firstname);
            argumentsOfScenario.Add("lastname", lastname);
            argumentsOfScenario.Add("totalprice", totalprice);
            argumentsOfScenario.Add("depositpaid", depositpaid);
            argumentsOfScenario.Add("checkin", checkin);
            argumentsOfScenario.Add("checkout", checkout);
            argumentsOfScenario.Add("additionalneeds", additionalneeds);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create booking with multiple valid payloads", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "firstname",
                            "lastname",
                            "totalprice",
                            "depositpaid",
                            "checkin",
                            "checkout",
                            "additionalneeds"});
                table1.AddRow(new string[] {
                            string.Format("{0}", firstname),
                            string.Format("{0}", lastname),
                            string.Format("{0}", totalprice),
                            string.Format("{0}", depositpaid),
                            string.Format("{0}", checkin),
                            string.Format("{0}", checkout),
                            string.Format("{0}", additionalneeds)});
#line 4
 await testRunner.GivenAsync("I have a booking with:", ((string)(null)), table1, "Given ");
#line hidden
#line 7
 await testRunner.WhenAsync("I send a create booking request", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 8
 await testRunner.ThenAsync("the response status should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 9
 await testRunner.AndAsync("the booking ID should be returned", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 10
 await testRunner.AndAsync("the booking details should match what I created", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create booking with edge case values")]
        [NUnit.Framework.TestCaseAttribute("Max", "Price", "1000000", "true", "2025-08-01", "2025-08-10", "VIP", "200", null)]
        [NUnit.Framework.TestCaseAttribute("Zero", "Price", "0", "false", "2025-08-01", "2025-08-02", "None", "200", null)]
        [NUnit.Framework.TestCaseAttribute("BadDates", "User", "100", "true", "2025-08-10", "2025-08-01", "Breakfast", "200", null)]
        [NUnit.Framework.TestCaseAttribute("Special", "Chars", "250", "true", "2025-09-05", "2025-09-10", "!@#$%^&*()", "200", null)]
        public async global::System.Threading.Tasks.Task CreateBookingWithEdgeCaseValues(string firstname, string lastname, string totalprice, string depositpaid, string checkin, string checkout, string additionalneeds, string expectedStatus, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("firstname", firstname);
            argumentsOfScenario.Add("lastname", lastname);
            argumentsOfScenario.Add("totalprice", totalprice);
            argumentsOfScenario.Add("depositpaid", depositpaid);
            argumentsOfScenario.Add("checkin", checkin);
            argumentsOfScenario.Add("checkout", checkout);
            argumentsOfScenario.Add("additionalneeds", additionalneeds);
            argumentsOfScenario.Add("expectedStatus", expectedStatus);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create booking with edge case values", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 18
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "firstname",
                            "lastname",
                            "totalprice",
                            "depositpaid",
                            "checkin",
                            "checkout",
                            "additionalneeds"});
                table2.AddRow(new string[] {
                            string.Format("{0}", firstname),
                            string.Format("{0}", lastname),
                            string.Format("{0}", totalprice),
                            string.Format("{0}", depositpaid),
                            string.Format("{0}", checkin),
                            string.Format("{0}", checkout),
                            string.Format("{0}", additionalneeds)});
#line 19
 await testRunner.GivenAsync("I have a booking with:", ((string)(null)), table2, "Given ");
#line hidden
#line 22
 await testRunner.WhenAsync("I send a create booking request", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 23
 await testRunner.ThenAsync(string.Format("the response status should be {0}", expectedStatus), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
